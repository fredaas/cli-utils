#!/usr/bin/env python3
"""
Usage:
    udpsend <addr> -m <message> [-t <secs>]

Options:
    <addr>
        Socket to send to in the form <ipv4>:<port>.

    -m <message>
        Message to send.

    -t <secs>
        Timeout after this many seconds (integer). [default: 3]
"""
import socket
import time

from docopt import docopt

is_running = True

UDP_RECV_MAX_SIZE = 1024


class UDPSocket():
    def __init__(self, addr, port, timeout=0.5):
        self.addr = (addr, port)
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.settimeout(timeout)

    def send(self, data):
        self.sock.sendto(data, self.addr)

    def recv(self):
        ret = ()
        try:
            ret = self.sock.recvfrom(UDP_RECV_MAX_SIZE)
        except TimeoutError:
            pass
        except Exception as e:
            print('recvfrom: {}'.format(e))
        return ret

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

    def __enter__(self):
        return self

    def close(self):
        self.sock.close()


def sigint_handler(sig, frame):
    global is_running
    is_running = False


def main():
    argv = docopt(__doc__, help=True)

    addr, port = argv['<addr>'].split(':')
    port = int(port)
    message = bytearray(argv['-m'], 'utf-8')
    timeout = int(argv['-t'])

    udp = UDPSocket(addr, port)
    udp.send(message)

    time_start = time.perf_counter()

    while is_running:
        resp = udp.recv()

        if time.perf_counter() - time_start >= timeout:
            print('Host timed out')
            break

        if not resp:
            continue

        data, addr = resp
        print(data.decode('utf-8'))
        break

    udp.close()


if __name__ == '__main__':
    main()
