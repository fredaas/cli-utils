#!/usr/bin/env python3
"""
Usage:
    udpsend -c <host> -p <port> -m <message> [-t <secs>]

Options:
    -c <host>
        Target host.

    -p <port>
        Target host port.

    -m <message>
        Message to send.

    -t <secs>
        Timeout after this many seconds (integer). [default: 3]
"""

import socket
import time
import signal

from docopt import docopt

is_running = True

UDP_RECV_MAX_SIZE = 1024


class UDPSocket:
    def __init__(self, addr, port, timeout=0.5):
        self.addr = (addr, port)
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.settimeout(timeout)

    def send(self, data):
        self.sock.sendto(data, self.addr)

    def recv(self):
        ret = ()
        try:
            ret = self.sock.recvfrom(UDP_RECV_MAX_SIZE)
        except TimeoutError:
            pass
        except Exception as e:
            print("recvfrom: {}".format(e))
        return ret

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

    def __enter__(self):
        return self

    def close(self):
        self.sock.close()


def sigint_handler(sig, frame):
    global is_running
    is_running = False


def byte2ascii(data):
    if data < 33 or data > 126:
        return "."
    return chr(data)


def calc_padding(bytes_remaining, bytes_per_column):
    padding = bytes_per_column - min(bytes_remaining, bytes_per_column)
    # Add 2 hex chars per byte + space between each byte in padding
    return padding * 2 + padding


def print_decoded_data(data, bytes_per_column=16):
    ascii_index_start = 0
    data_length = len(data)

    for i in range(data_length):
        print("{:02X}".format(data[i]), end=" ", flush=True)
        # Print ASCII decoding + newline on column limit or on last byte
        if (i + 1) % bytes_per_column == 0 or i == data_length - 1:
            padding = calc_padding(data_length - ascii_index_start, bytes_per_column)
            print(" " * padding + "|", end="")
            print(" ", end="")
            for j in range(ascii_index_start, i + 1):
                print(byte2ascii(data[j]), end="", flush=True)
            print()
            ascii_index_start = i + 1


def main():
    argv = docopt(__doc__, help=True)

    addr, port = argv["-c"], int(argv["-p"])
    message = bytearray(argv["-m"], "utf-8")
    timeout = int(argv["-t"])

    udp = UDPSocket(addr, port)
    udp.send(message)

    time_start = time.perf_counter()

    print("Will listen for {} seconds. CTRL+C to exit.\n".format(timeout))

    signal.signal(signal.SIGINT, sigint_handler)

    count = 0

    while is_running:
        resp = udp.recv()

        if time.perf_counter() - time_start >= timeout:
            break

        if not resp:
            continue

        data, addr = resp

        count += 1

        if data:
            print("No: {}".format(count))
            print_decoded_data(data)
            print()

    udp.close()

    # Print a space after CTRL+C (visual preference only)
    print()


if __name__ == "__main__":
    main()
